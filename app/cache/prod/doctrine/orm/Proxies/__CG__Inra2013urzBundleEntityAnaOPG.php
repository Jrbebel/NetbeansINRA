<?php

namespace Proxies\__CG__\Inra2013\urzBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class AnaOPG extends \Inra2013\urzBundle\Entity\AnaOPG implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setOeufLu($oeufLu)
    {
        $this->__load();
        return parent::setOeufLu($oeufLu);
    }

    public function getOeufLu()
    {
        $this->__load();
        return parent::getOeufLu();
    }

    public function setVolLu($volLu)
    {
        $this->__load();
        return parent::setVolLu($volLu);
    }

    public function getVolLu()
    {
        $this->__load();
        return parent::getVolLu();
    }

    public function setOpg($opg)
    {
        $this->__load();
        return parent::setOpg($opg);
    }

    public function getOpg()
    {
        $this->__load();
        return parent::getOpg();
    }

    public function setConccidies($conccidies)
    {
        $this->__load();
        return parent::setConccidies($conccidies);
    }

    public function getConccidies()
    {
        $this->__load();
        return parent::getConccidies();
    }

    public function setMonezia($monezia)
    {
        $this->__load();
        return parent::setMonezia($monezia);
    }

    public function getMonezia()
    {
        $this->__load();
        return parent::getMonezia();
    }

    public function setStrongeledia($strongeledia)
    {
        $this->__load();
        return parent::setStrongeledia($strongeledia);
    }

    public function getStrongeledia()
    {
        $this->__load();
        return parent::getStrongeledia();
    }

    public function setCodeLabo(\Inra2013\urzBundle\Entity\Analyse $codeLabo)
    {
        $this->__load();
        return parent::setCodeLabo($codeLabo);
    }

    public function getCodeLabo()
    {
        $this->__load();
        return parent::getCodeLabo();
    }

    public function setUser(\Inra2013\urzBundle\Entity\User $user = NULL)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setPrisEssai($prisEssai)
    {
        $this->__load();
        return parent::setPrisEssai($prisEssai);
    }

    public function getPrisEssai()
    {
        $this->__load();
        return parent::getPrisEssai();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'PrisEssai', 'OeufLu', 'VolLu', 'Opg', 'Conccidies', 'Monezia', 'Strongeledia', 'CodeLabo', 'User');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}